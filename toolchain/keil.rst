.. _keil:

Keil
===========

Keil vs IAR
-------------

Keil MDK-ARM（旧称RealView MDK）开发工具源自德国Keil公司，被全球上百万的嵌入式开发工程师验证和使用，是ARM公司目前最新推出的针对各种嵌入式处理器的软件开发工具。

KEIL MDK集成了业内最领先的技术，包括uVision3、uVision4、uVision5集成开发环境与 ARM编译器。支持ARM7、ARM9、Cortex-M0、Cortex-M0+、Cortex-M3、Cortex-M4、Cortex-R4内核核处理器。

Keil MDK可以自动配置启动代码，集成Flash烧写模块，强大的Simulation设备模拟，性能分析等功能，与ARM之前的工具包ADS等相比，ARM编译器的最新版本可将性能改善超过20％以上。
　　
IAR Embedded Workbench是一套用于编译和调试嵌入式系统应用程序的开发工具，支持汇编、C和C++语言。它提供完整的集成开发环境，包括工程管理器、编辑器、编译链接工具和C-SPY调试器。

IAR Systems以其高度优化的编译器而闻名。每个C/C++编译器不仅包含一般全局性的优化，也包含针对特定芯片的低级优化，以充分利用您所选芯片的所有特性，确保较小的代码尺寸。IAR Embedded Workbench能够支持由不同的芯片制造商生产，且种类繁多的8位、16位或32位芯片。


优化等级
-----------

-O0
最少的优化，可以最大程度上配合产生代码调试信息，可以在任何代码行打断点，特别是死代码处。

-O1
有限的优化，去除无用的inline和无用的static函数、死代码消除等，在影响到调试信息的地方均不进行优化。在适当的代码体积和充分的调试之间平衡，代码编写阶段最常用的优化等级。

-O2
高度优化，调试信息不友好，有可能会修改代码和函数调用执行流程，自动对函数进行内联等。

-O3
最大程度优化，产生极少量的调试信息。会进行更多代码优化，例如循环展开，更激进的函数内联等。

另外，可以通过单独设置 --loop_optimization_level=option 来控制循环展开的优化等级。


编程算法FLM
------------

MDK在下载程序之前需要都在Debug设置的Flash Download子选项卡选择编程算法。大多数时候，我们只要安装了芯片包之后，就可以直接得到对应的编程算法，并不需要我们去修改它。

但是，当你是一个芯片包的开发者，或者你有独特的下载需求（比如在你的程序里加入一些校验信息），这个时候你就需要去了解它了！

编程算法主要功能就是擦除相应的内存块，并将我们的程序写入到相应的内存区域上去。在你点击下载按钮的时候，这段程序会被先下载到RAM上（RAM for Algorithm上的设置），然后才会通过它，将你的程序写入到指定的内存区域内。


格式输出
-----------

使用fromelf工具,通过上面的示例,想必都能很轻松的生成bin文件,今天补写一下fromelf工具的基本命令:

    --bin:输出二进制文件
    --i32:Intel 32位Hex
    --m32：Motorola 32位Hex
    --output <file>:file为输出文件名
    -o<file>:这个是armcc编译器命令,也可用于这里,指定输出文件的名字

fromelf --bin "$L@L.axf" --output "$L@L.bin"

勾选了“use cross-module optimization//跨模块优化，KEIL每次都要编译全部文件并且每个文件编译三次


常见问题
-----------

MDK偶尔会出现错误提示“Error: Encountered an improper argument”。大概意思是说“错误：遇到不正确的参数”。
出现这种情况时，对话框关掉之后会再次出现，只能使用任务管理器强制停止才行。在官网上查一下这个错误信息，原来是Keil软件的BUG。

在某些情况下，当您退出调试会话时，可能会显示一个错误对话框，提示“遇到不正确的参数”。 如果发生这种情况，μVision需要使用Windows任务管理器终止。
在大多数情况下，亚洲使用Windows操作系统的客户在项目路径中使用亚洲字符时会受到此问题的影响。
很有可能你的工程路径中有中文（不过之前Keil是支持的），将路径变成中文就可以的了。


WARNING L2: REFERENCE MADE TO UNRESOLVED EXTERNAL

如果你在用C51编译器出现上面的警告，这个只是初学者和粗心者才会犯的错误：没把C文件添加到项目中！
另外，还有可能是因为存在没有被调用的已经定义的函数，或者相关的已经定义的变量没有使用。

WARNING L15: MULTIPLE CALL TO SEGMENT

该警告表示连接器发现有一个函数可能会被主函数和一个中断服务程序(或者调用中断服务程序的函数)同时调用，或者同时被多个中断服务程序调用。

出现这种警告的原因一般有两种：

* 第一：这个函数是不可重入函数，当该函数运行时可能被打断，打断后该函数又被再次运行，从而造成函数内部数据丢失；
* 第二：该函数的内部变量数据所占有的内存在link时被连接器认为是可覆盖的，因此在连接时进行了数据覆盖优化，但是连接器同时发现该函数在运行时被打断后，其他函数（如中断服务子程序）的运行造成了该函数的数据被覆盖。

WARNING L16: UNCALLED SEGMENT, IGNORED FOR OVERLAY PROCESS

定义的函数没有调用而已
