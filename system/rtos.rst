
.. _rtos:

RTOS
===============

.. contents::
    :local:
    :depth: 1

FreeRTOS
-----------

调度方式
~~~~~~~~~~~

`FreeRTOS <https://doc.os-q.com/qio/framework/freertos>`_ 三种调度方式：抢占式，时间片、合作式，实际应用主要是抢占式调度和时间片调度，合作式调度用到的很少。

抢占式调度（不同优先级）：每个任务都有不同的优先级，任务会一直运行直到被高优先级任务抢占或者遇到阻塞式的API函数，比如vTaskDelay。
时间片调度（相同优先级）：每个任务都有相同的优先级，任务会运行固定的时间片个数或者遇到阻塞式的API函数，比如vTaskDelay，才会执行同优先级任务之间的任务切换。

抢占式调度器
^^^^^^^^^^^^^^

在实际的应用中，不同的任务需要不同的响应时间。例如，在一个应用中需要使用电机，键盘和LCD显示。电机比键盘和LCD需要更快速的响应，如果我们使用时间片调度，那么电机将无法得到及时的响应，这时抢占式调度是必须的。
如果使用了抢占式调度，最高优先级的任务一旦就绪，总能得到CPU的控制权。比如，当一个运行着的任务被其它高优先级的任务抢占，当前任务的CPU使用权就被剥夺了，或者说被挂起了，那个高优先级的任务立刻得到了CPU的控制权并运行。又比如，如果中断服务程序使一个高优先级的任务进入就绪态，中断完成时，被中断的低优先级任务被挂起，优先级高的那个任务开始运行。
每个任务都被分配了不同的优先级，抢占式调度器会获得就绪列表中优先级最高的任务，并运行这个任务。

时间片调度器
^^^^^^^^^^^^^^
时间片调度适合用于不要求任务实时响应的情况

需要给同优先级的任务分配一个专门的列表，用于记录当前就绪的任务，并为每个任务分配一个时间片，也就是需要运行的时间长度，时间片用完了就进行任务切换。
在FreeRTOS操作系统中只有同优先级任务才会使用时间片调度，另外还需要用户在FreeRTOSConfig.h文件中使能宏定义： #define configUSE_TIME_SLICING 1
