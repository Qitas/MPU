.. _lan_c_data:

数据结构
===============

.. contents::
    :local:
    :depth: 1


指针
-----------

.. toctree::
    :maxdepth: 1

    指针概念 <pointer>


数组
-----------


零长数组
~~~~~~~~~~~~~~

今天在看代码中遇到一个结构中包含char data[0]，第一次见到时感觉很奇怪，数组的长度怎么可以为零呢？于是上网搜索一下这样的用法的目的，发现在linux内核中，结构体中经常用到data[0]。
这样设计的目的是让数组长度是可变的，根据需要进行分配。方便操作，节省空间。

.. code-block:: bash

    struct buffer
    {
        int data_len;   //长度
        char data[0];  //起始地址
    };

在这个结构中，data是一个数组名；但该数组没有元素；该数组的真实地址紧随结构体buffer之后，而这个地址就是结构体后面数据的地址（如果给这个结构体分配的内容大于这个结构体实际大小，后面多余的部分就是这个data的内容）；这种声明方法可以巧妙的实现C语言里的数组扩展。

对比指针
^^^^^^^^^^^^^^

从结果可以看出data[0]和data[]不占用空间，且地址紧跟在结构后面，而char *data作为指针，占用4个字节，地址不在结构之后。

在实际程序中，数据的长度很多是未知的，这样通过变长的数组可以方便的节省空间。对指针操作，方便数据类型的转换。

采用char *data，需要进行二次分配，操作比较麻烦，很容易造成内存泄漏。而直接采用变长的数组，只需要分配一次，然后进行取值即可以。


链表
-----------

链表是一系列的元素连接在一起形成的数据结构。在c语言中，链表是用指针来构建的。使用链表数据结构是使用内存操作比较的一种方式。二叉树是链表的延伸。它的每一个节点都有两个指针，一个指向左，一个指向右。



其他
-----------

* :ref:`lan_c_stack`
* 队列
* 树
* 图
* 字典树（这是一种高效的树形结构，但值得单独说明）
* 散列表（哈希表）

