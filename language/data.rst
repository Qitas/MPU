.. _lan_c_data:

数据
===============

.. contents::
    :local:


数据结构
-----------

* 数组
* 栈
* 队列
* 链表
* 树
* 图
* 字典树（这是一种高效的树形结构，但值得单独说明）
* 散列表（哈希表）


内存管理
-----------

CCM只可以CPU访问，SRAM的话CPU和DMA等外设都可以访问。

在 C 语言中，程序中 malloc 等内存分配函数的使用次数一定要和 free 相等，并一一配对使用。绝对要避免“malloc 两次 free 一次”或者“malloc 一次 free 两次”等情况。
在使用指针进行动态内存分配操作时，在指针 p 被 free 释放之后，指针变量本身并没有被删除。如果这时候没有将指针 p 置为 NULL，会让人误以为 p 是个合法的指针而在以后的程序中错误使用它。

“free(p)”释放的是指针变量 p 所指向的内存，而不是指针变量 p 本身。指针变量 p 并没有被释放，仍然指向原来的存储空间。
虽然释放了指针变量 p，但这个时候指针变量 p 本身并没有被删除，其保存的地址并没有改变。但是，此时 p 虽不是 NULL 指针，但它却不指向合法的内存块，成为“野指针”或称为“悬垂指针”
